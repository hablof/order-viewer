package httpcontroller

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/hablof/order-viewer/internal/httpcontroller.Service -o ./internal\httpcontroller\service_mock_test.go -n ServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/hablof/order-viewer/internal/models"
)

// ServiceMock implements Service
type ServiceMock struct {
	t minimock.Tester

	funcGetOrder          func(ctx context.Context, OrderUID string) (o1 models.Order, err error)
	inspectFuncGetOrder   func(ctx context.Context, OrderUID string)
	afterGetOrderCounter  uint64
	beforeGetOrderCounter uint64
	GetOrderMock          mServiceMockGetOrder
}

// NewServiceMock returns a mock for Service
func NewServiceMock(t minimock.Tester) *ServiceMock {
	m := &ServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetOrderMock = mServiceMockGetOrder{mock: m}
	m.GetOrderMock.callArgs = []*ServiceMockGetOrderParams{}

	return m
}

type mServiceMockGetOrder struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockGetOrderExpectation
	expectations       []*ServiceMockGetOrderExpectation

	callArgs []*ServiceMockGetOrderParams
	mutex    sync.RWMutex
}

// ServiceMockGetOrderExpectation specifies expectation struct of the Service.GetOrder
type ServiceMockGetOrderExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockGetOrderParams
	results *ServiceMockGetOrderResults
	Counter uint64
}

// ServiceMockGetOrderParams contains parameters of the Service.GetOrder
type ServiceMockGetOrderParams struct {
	ctx      context.Context
	OrderUID string
}

// ServiceMockGetOrderResults contains results of the Service.GetOrder
type ServiceMockGetOrderResults struct {
	o1  models.Order
	err error
}

// Expect sets up expected params for Service.GetOrder
func (mmGetOrder *mServiceMockGetOrder) Expect(ctx context.Context, OrderUID string) *mServiceMockGetOrder {
	if mmGetOrder.mock.funcGetOrder != nil {
		mmGetOrder.mock.t.Fatalf("ServiceMock.GetOrder mock is already set by Set")
	}

	if mmGetOrder.defaultExpectation == nil {
		mmGetOrder.defaultExpectation = &ServiceMockGetOrderExpectation{}
	}

	mmGetOrder.defaultExpectation.params = &ServiceMockGetOrderParams{ctx, OrderUID}
	for _, e := range mmGetOrder.expectations {
		if minimock.Equal(e.params, mmGetOrder.defaultExpectation.params) {
			mmGetOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOrder.defaultExpectation.params)
		}
	}

	return mmGetOrder
}

// Inspect accepts an inspector function that has same arguments as the Service.GetOrder
func (mmGetOrder *mServiceMockGetOrder) Inspect(f func(ctx context.Context, OrderUID string)) *mServiceMockGetOrder {
	if mmGetOrder.mock.inspectFuncGetOrder != nil {
		mmGetOrder.mock.t.Fatalf("Inspect function is already set for ServiceMock.GetOrder")
	}

	mmGetOrder.mock.inspectFuncGetOrder = f

	return mmGetOrder
}

// Return sets up results that will be returned by Service.GetOrder
func (mmGetOrder *mServiceMockGetOrder) Return(o1 models.Order, err error) *ServiceMock {
	if mmGetOrder.mock.funcGetOrder != nil {
		mmGetOrder.mock.t.Fatalf("ServiceMock.GetOrder mock is already set by Set")
	}

	if mmGetOrder.defaultExpectation == nil {
		mmGetOrder.defaultExpectation = &ServiceMockGetOrderExpectation{mock: mmGetOrder.mock}
	}
	mmGetOrder.defaultExpectation.results = &ServiceMockGetOrderResults{o1, err}
	return mmGetOrder.mock
}

// Set uses given function f to mock the Service.GetOrder method
func (mmGetOrder *mServiceMockGetOrder) Set(f func(ctx context.Context, OrderUID string) (o1 models.Order, err error)) *ServiceMock {
	if mmGetOrder.defaultExpectation != nil {
		mmGetOrder.mock.t.Fatalf("Default expectation is already set for the Service.GetOrder method")
	}

	if len(mmGetOrder.expectations) > 0 {
		mmGetOrder.mock.t.Fatalf("Some expectations are already set for the Service.GetOrder method")
	}

	mmGetOrder.mock.funcGetOrder = f
	return mmGetOrder.mock
}

// When sets expectation for the Service.GetOrder which will trigger the result defined by the following
// Then helper
func (mmGetOrder *mServiceMockGetOrder) When(ctx context.Context, OrderUID string) *ServiceMockGetOrderExpectation {
	if mmGetOrder.mock.funcGetOrder != nil {
		mmGetOrder.mock.t.Fatalf("ServiceMock.GetOrder mock is already set by Set")
	}

	expectation := &ServiceMockGetOrderExpectation{
		mock:   mmGetOrder.mock,
		params: &ServiceMockGetOrderParams{ctx, OrderUID},
	}
	mmGetOrder.expectations = append(mmGetOrder.expectations, expectation)
	return expectation
}

// Then sets up Service.GetOrder return parameters for the expectation previously defined by the When method
func (e *ServiceMockGetOrderExpectation) Then(o1 models.Order, err error) *ServiceMock {
	e.results = &ServiceMockGetOrderResults{o1, err}
	return e.mock
}

// GetOrder implements Service
func (mmGetOrder *ServiceMock) GetOrder(ctx context.Context, OrderUID string) (o1 models.Order, err error) {
	mm_atomic.AddUint64(&mmGetOrder.beforeGetOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrder.afterGetOrderCounter, 1)

	if mmGetOrder.inspectFuncGetOrder != nil {
		mmGetOrder.inspectFuncGetOrder(ctx, OrderUID)
	}

	mm_params := &ServiceMockGetOrderParams{ctx, OrderUID}

	// Record call args
	mmGetOrder.GetOrderMock.mutex.Lock()
	mmGetOrder.GetOrderMock.callArgs = append(mmGetOrder.GetOrderMock.callArgs, mm_params)
	mmGetOrder.GetOrderMock.mutex.Unlock()

	for _, e := range mmGetOrder.GetOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.o1, e.results.err
		}
	}

	if mmGetOrder.GetOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrder.GetOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOrder.GetOrderMock.defaultExpectation.params
		mm_got := ServiceMockGetOrderParams{ctx, OrderUID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOrder.t.Errorf("ServiceMock.GetOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOrder.GetOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOrder.t.Fatal("No results are set for the ServiceMock.GetOrder")
		}
		return (*mm_results).o1, (*mm_results).err
	}
	if mmGetOrder.funcGetOrder != nil {
		return mmGetOrder.funcGetOrder(ctx, OrderUID)
	}
	mmGetOrder.t.Fatalf("Unexpected call to ServiceMock.GetOrder. %v %v", ctx, OrderUID)
	return
}

// GetOrderAfterCounter returns a count of finished ServiceMock.GetOrder invocations
func (mmGetOrder *ServiceMock) GetOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrder.afterGetOrderCounter)
}

// GetOrderBeforeCounter returns a count of ServiceMock.GetOrder invocations
func (mmGetOrder *ServiceMock) GetOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrder.beforeGetOrderCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.GetOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOrder *mServiceMockGetOrder) Calls() []*ServiceMockGetOrderParams {
	mmGetOrder.mutex.RLock()

	argCopy := make([]*ServiceMockGetOrderParams, len(mmGetOrder.callArgs))
	copy(argCopy, mmGetOrder.callArgs)

	mmGetOrder.mutex.RUnlock()

	return argCopy
}

// MinimockGetOrderDone returns true if the count of the GetOrder invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockGetOrderDone() bool {
	for _, e := range m.GetOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrder != nil && mm_atomic.LoadUint64(&m.afterGetOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOrderInspect logs each unmet expectation
func (m *ServiceMock) MinimockGetOrderInspect() {
	for _, e := range m.GetOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.GetOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOrderCounter) < 1 {
		if m.GetOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.GetOrder")
		} else {
			m.t.Errorf("Expected call to ServiceMock.GetOrder with params: %#v", *m.GetOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrder != nil && mm_atomic.LoadUint64(&m.afterGetOrderCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.GetOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetOrderInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetOrderDone()
}
